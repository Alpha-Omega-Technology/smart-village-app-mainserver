type AccessibilityInformation {
  description: String
  id: ID!
  types: String
  urls: [WebUrl!]
}

input AccessibilityInformationInput {
  description: String
  types: String
  urls: [WebUrlInput!]
}

type Address {
  addition: String
  city: String
  geoLocation: GeoLocation
  id: ID
  kind: String!
  street: String
  zip: String
}

input AddressInput {
  addition: String
  city: String
  geoLocation: GeoLocationInput
  kind: String
  street: String
  zip: String
}

type Certificate {
  id: ID!
  name: String
}

input CertificateInput {
  name: String!
}

type Contact {
  email: String
  fax: Boolean
  firstName: String
  id: ID!
  lastName: String
  phone: String
  webUrls: [WebUrl!]
}

input ContactInput {
  email: String
  fax: String
  firstName: String
  lastName: String
  phone: String
  webUrls: [WebUrlInput!]
}

type ContentBlock {
  body: String
  createdAt: String
  id: ID!
  intro: String
  mediaContents: [MediaContent!]
  title: String
  updatedAt: String
}

type DataProvider {
  address: Address
  contact: Contact
  description: String
  id: ID!
  logo: WebUrl
  name: String
}

input DataProviderInput {
  address: AddressInput
  contact: ContactInput
  description: String
  logo: WebUrlInput
  name: String
}

type Date {
  dateEnd: String
  dateStart: String
  id: ID!
  timeDescription: String
  timeEnd: String
  timeStart: String
  useOnlyTimeDescription: String
  weekday: String
}

type EventRecord {
  accessibilityInformation: AccessibilityInformation
  addresses: [Address!]!
  categoryId: Int!
  contacts: [Contact!]
  createdAt: String
  dataProvider: DataProvider
  dates: [Date!]!
  description: String
  id: ID!
  location: Location
  mediaContents: [MediaContent!]
  organizer: OperatingCompany
  parentId: String
  priceInformations: [Price!]
  repeat: Boolean
  repeatDuration: RepeatDuration
  title: String!
  updatedAt: String
  urls: [WebUrl!]
}

enum EventRecordsOrder {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GeoLocation {
  id: ID!
  latitude: Float!
  longitude: Float!
}

input GeoLocationInput {
  latitude: Float!
  longitude: Float!
}

type Location {
  department: String
  district: String
  geoLocation: GeoLocation
  id: ID
  name: String
  regionId: Int
  state: String!
}

input LocationInput {
  department: String
  district: String
  geoLocation: GeoLocationInput
  name: String
  regionId: Int
  state: String
}

type MediaContent {
  captionText: String!
  contentType: String!
  copyright: String
  height: Int
  id: ID!
  sourceUrl: WebUrl!
  width: Int
}

input MediaContentInput {
  captionText: String
  contentType: String
  copyright: String
  height: Int
  sourceUrl: WebUrlInput
  width: Int
}

type Mutation {
  createPointOfInterest(accessibilityInformation: AccessibilityInformationInput, active: Boolean, addresses: [AddressInput!], categoryId: Int, certificates: [CertificateInput!], contact: ContactInput, dataProvider: DataProviderInput, description: String, location: LocationInput, mediaContents: [MediaContentInput!], mobileDescription: String, name: String!, openingHours: [OpeningHourInput!], operatingCompany: OperatingCompanyInput, prices: [PriceInput!], tags: String, webUrls: [WebUrlInput!]): PointOfInterest!
}

type NewsItem {
  address: Address
  author: String
  charactersToBeShown: String
  contentBlocks: [ContentBlock!]
  createdAt: String
  dataProvider: DataProvider
  fullVersion: Boolean!
  id: ID!
  newsType: String
  publicationDate: String
  publishedAt: String!
  showPublishDate: Boolean!
  sourceUrl: WebUrl
  updatedAt: String
}

enum NewsItemsOrder {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OpeningHour {
  dateFrom: String
  dateTo: String
  description: String
  id: ID!
  open: Boolean
  sortNumber: Int
  timeFrom: String
  timeTo: String
  weekday: String
}

input OpeningHourInput {
  dateFrom: String
  dateTo: String
  description: String
  open: Boolean
  sortNumber: Int
  timeFrom: String
  timeTo: String
  weekday: String
}

type OperatingCompany {
  address: Address
  contact: Contact
  id: ID!
  name: String
}

input OperatingCompanyInput {
  address: AddressInput
  contact: ContactInput
  name: String!
}

type PointOfInterest {
  accessibilityInformation: AccessibilityInformation
  active: Boolean
  addresses: [Address!]!
  categoryId: Int!
  certificates: [Certificate!]
  contact: Contact
  createdAt: String
  dataProvider: DataProvider
  description: String
  id: ID!
  location: Location
  mediaContents: [MediaContent!]
  mobileDescription: String
  name: String!
  openingHours: [OpeningHour!]
  operatingCompany: OperatingCompany
  prices: [Price!]
  tagList: String
  updatedAt: String
  webUrls: [WebUrl!]
}

enum PointsOfInterestOrder {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type Price {
  ageFrom: Int
  ageTo: Int
  amount: Float
  category: String
  description: String
  groupPrice: Boolean
  id: ID
  maxAdultCount: Int
  maxChildrenCount: Int
  minAdultCount: Int
  minChildrenCount: Int
  name: String
}

input PriceInput {
  ageFrom: Int
  ageTo: Int
  amount: Float
  category: String
  description: String
  groupPrice: Boolean
  maxAdultCount: Int
  maxChildrenCount: Int
  minAdultCount: Int
  minChildrenCount: Int
  name: String
}

type Query {
  eventRecord(id: ID!): EventRecord!
  eventRecords(limit: Int, order: EventRecordsOrder = createdAt_DESC, skip: Int): [EventRecord]
  newsItem(id: ID!): NewsItem!
  newsItems(limit: Int, order: NewsItemsOrder = createdAt_DESC, skip: Int): [NewsItem]
  pointOfInterest(id: ID!): PointOfInterest!
  pointsOfInterest(limit: Int, order: PointsOfInterestOrder = createdAt_DESC, skip: Int): [PointOfInterest]
  tour(id: ID!): Tour!
  tours(limit: Int, order: ToursOrder = createdAt_DESC, skip: Int): [Tour!]!
}

type Region {
  name: String!
}

type RepeatDuration {
  endDate: String
  everyYear: String
  id: ID!
  startDate: String
}

type Tour {
  active: Boolean
  addresses: [Address!]
  categoryId: Int!
  certificates: [Certificate!]
  contact: Contact
  createdAt: String
  dataProvider: DataProvider
  description: String
  geometryTourData: [GeoLocation!]!
  id: ID!
  lengthKm: Int
  meansOfTransportation: String
  mediaContents: [MediaContent!]
  mobileDescription: String
  name: String!
  operatingCompany: OperatingCompany
  regions: [Region!]
  tags: String
  updatedAt: String
  webUrls: [WebUrl!]
}

enum ToursOrder {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WebUrl {
  description: String
  id: ID!
  url: String!
}

input WebUrlInput {
  description: String
  url: String
}